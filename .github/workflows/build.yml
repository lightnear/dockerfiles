name: build

on:
  repository_dispatch:
    types: [on-docker-build]
  # schedule:
  #   # * is a special character in YAML so you have to quote this string
  #   # UTC 01:00 -> CST (China) 09:00, see https://datetime360.com/cn/utc-cst-china-time/
  #   - cron: '0 1 * * 1' # every monday at 1am
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

jobs:
  alpine-docker:
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=latest
            # type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/alpine
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  centos-docker:
    if: ${{ always() }}
    needs: alpine-docker
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/centos
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=7
            type=raw,value=latest
            # type=raw,value=7,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/centos
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  ubuntu-docker:
    if: ${{ always() }}
    needs: centos-docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        version: ["24.04", "22.04"]
    env:
      IMAGE: lightnear/ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=24.04,enable=${{ contains(matrix.version, '24.04') }}
            type=raw,value=noble,enable=${{ contains(matrix.version, '24.04') }}
            type=raw,value=latest,enable=${{ contains(matrix.version, '24.04') }}
            type=raw,value=22.04,enable=${{ contains(matrix.version, '22.04') }}
            type=raw,value=jammy,enable=${{ contains(matrix.version, '22.04') }}
            # type=raw,value=20.04,enable=${{ contains(matrix.version, '20.04') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=focal,enable=${{ contains(matrix.version, '20.04') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=22.04,enable=${{ contains(matrix.version, '22.04') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=jammy,enable=${{ contains(matrix.version, '22.04') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=latest,enable=${{ contains(matrix.version, '22.04') && startsWith(github.ref, 'refs/tags/') }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: edit Dockerfile
        run: |
          sed -i -e 's|FROM.*|FROM ubuntu:${{ matrix.version }}|' ./base/ubuntu/Dockerfile

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/ubuntu
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }}
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }},mode=max

  debian-docker:
    if: ${{ always() }}
    needs: ubuntu-docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        version: ["12", "11"]

    env:
      IMAGE: lightnear/debian

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=11,enable=${{ contains(matrix.version, '11') }}
            type=raw,value=bullseye,enable=${{ contains(matrix.version, '11') }}
            type=raw,value=12,enable=${{ contains(matrix.version, '12') }}
            type=raw,value=bookworm,enable=${{ contains(matrix.version, '12') }}
            type=raw,value=latest,enable=${{ contains(matrix.version, '12') }}
            # type=raw,value=11,enable=${{ contains(matrix.version, '11') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=bullseye,enable=${{ contains(matrix.version, '11') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=12,enable=${{ contains(matrix.version, '12') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=bookworm,enable=${{ contains(matrix.version, '12') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=latest,enable=${{ contains(matrix.version, '12') && startsWith(github.ref, 'refs/tags/') }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: edit Dockerfile
        run: |
          sed -i -e 's|FROM.*|FROM debian:${{ matrix.version }}|' ./base/debian/Dockerfile

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/debian
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }}
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }},mode=max

  rocky-docker:
    if: ${{ always() }}
    needs: debian-docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        version: ["9", "8"]
    env:
      IMAGE: lightnear/rockylinux
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=8,enable=${{ contains(matrix.version, '8') }}
            type=raw,value=9,enable=${{ contains(matrix.version, '9') }}
            type=raw,value=latest,enable=${{ contains(matrix.version, '9') }}
            # type=raw,value=8,enable=${{ contains(matrix.version, '8') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=9,enable=${{ contains(matrix.version, '9') && startsWith(github.ref, 'refs/tags/') }}
            # type=raw,value=latest,enable=${{ contains(matrix.version, '9') && startsWith(github.ref, 'refs/tags/') }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: edit Dockerfile
        run: |
          sed -i -e 's|FROM.*|FROM rockylinux:${{ matrix.version }}|' ./base/rockylinux/Dockerfile

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/rockylinux
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }}
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }},mode=max

  python-docker:
    if: ${{ always() }}
    needs: rocky-docker
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/python
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=latest
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./base/python
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  tftp-docker:
    if: ${{ always() }}
    needs: python-docker
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/tftp
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=latest
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./tftp
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  kms-docker:
    if: ${{ always() }}
    needs: tftp-docker
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/kms
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Wind4/vlmcsd
          submodules: "recursive"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          # flavor: |
          #   latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=latest
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  frp-docker:
    if: ${{ always() }}
    needs: kms-docker
    runs-on: ubuntu-latest
    env:
      IMAGE: lightnear/frp
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Get FRP version
        run: |
          FRP_VERSION=$(curl -sX GET "https://api.github.com/repos/fatedier/frp/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]')
          FRP_VERSION=$(echo $FRP_VERSION | tr -d 'v');
          echo "FRP_VERSION=$FRP_VERSION" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE }}
            ghcr.io/${{ env.IMAGE }}
          flavor: |
            latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=edge,branch=main
            type=semver,pattern={{version}},value=${{ env.FRP_VERSION }},enable=${{ env.FRP_VERSION != null }}
          labels: |
            maintainer=lightnear

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frp
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  # zabbix-docker:
  #   if: ${{ always() }}
  #   needs: frp-docker
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     max-parallel: 1
  #     matrix:
  #       image: ["zabbix-server-pgsql", "zabbix-server-mysql"]
  #       version: ["alpine-7.0-latest"]
  #   env:
  #     IMAGE: lightnear/${{ matrix.image }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ${{ env.IMAGE }}
  #           ghcr.io/${{ env.IMAGE }}
  #         # flavor: |
  #         #   latest=auto
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=schedule,pattern=nightly
  #           type=ref,event=branch
  #           type=edge,branch=main
  #           type=raw,value=${{ matrix.version }}
  #           type=raw,value=latest,enable=${{ contains(matrix.version, 'alpine-7.0-latest') }}
  #         labels: |
  #           maintainer=lightnear

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: edit Dockerfile
  #       run: |
  #         sed -i -e 's|FROM.*|FROM zabbix/${{ matrix.image }}:${{ matrix.version }}|' ./zabbix-server/Dockerfile

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./zabbix-server
  #         platforms: |
  #           linux/amd64
  #           linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }}
  #         cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-${{ matrix.version }},mode=max

  # wordpress-apache:
  #   if: ${{ always() }}
  #   needs: zabbix-docker
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE: lightnear/wordpress
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ${{ env.IMAGE }}
  #           ghcr.io/${{ env.IMAGE }}
  #         # flavor: |
  #         #   latest=auto
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=schedule,pattern=nightly
  #           type=ref,event=branch
  #           type=edge,branch=main
  #           type=raw,value=apache
  #         labels: |
  #           maintainer=lightnear

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./wordpress/apache
  #         platforms: |
  #           linux/amd64
  #           linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-apache
  #         cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-apache,mode=max

  # wordpress-fpm:
  #   if: ${{ always() }}
  #   needs: wordpress-apache
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE: lightnear/wordpress
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ${{ env.IMAGE }}
  #           ghcr.io/${{ env.IMAGE }}
  #         # flavor: |
  #         #   latest=auto
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=schedule,pattern=nightly
  #           type=ref,event=branch
  #           type=edge,branch=main
  #           type=raw,value=fpm
  #         labels: |
  #           maintainer=lightnear

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./wordpress/fpm
  #         platforms: |
  #           linux/amd64
  #           linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache-fpm
  #         cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache-fpm,mode=max

  # chevereto-docker:
  #   if: ${{ always() }}
  #   needs: wordpress-fpm
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE: lightnear/chevereto
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - name: Get FRP version
  #       run: |
  #         CHEREVETO_VERSION=$(curl -sX GET "https://api.github.com/repos/rodber/chevereto-free/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]');
  #         CHEREVETO_VERSION=${CHEREVETO_VERSION:-1.6.2}
  #         echo "CHEREVETO_VERSION=$CHEREVETO_VERSION" >> $GITHUB_ENV

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ${{ env.IMAGE }}
  #           ghcr.io/${{ env.IMAGE }}
  #         flavor: |
  #           latest=auto
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=schedule,pattern=nightly
  #           type=ref,event=branch
  #           type=edge,branch=main
  #           type=semver,pattern={{version}},value=${{ env.CHEREVETO_VERSION }}
  #         labels: |
  #           maintainer=lightnear

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./chevereto
  #         platforms: |
  #           linux/amd64
  #           linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
  #         cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  # singbox-docker:
  #   if: ${{ always() }}
  #   needs: chevereto-docker
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE: lightnear/sing-box
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - name: Get latest version
  #       run: |
  #         LATEST_VERSION=""
  #         until [ -n "$LATEST_VERSION" ]; do
  #         LATEST_VERSION=$(curl -sX GET "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | \
  #         awk '/tag_name/{print $4;exit}' FS='[""]')
  #         done
  #         LATEST_VERSION=$(echo $LATEST_VERSION | tr -d 'v')
  #         echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ${{ env.IMAGE }}
  #           ghcr.io/${{ env.IMAGE }}
  #         flavor: |
  #           latest=auto
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=schedule,pattern=nightly
  #           type=ref,event=branch
  #           type=edge,branch=main
  #           type=semver,pattern={{version}},value=${{ env.LATEST_VERSION }},enable=${{ env.LATEST_VERSION != null }}
  #           type=semver,pattern={{major}}.{{minor}},value=${{ env.LATEST_VERSION }},enable=${{ env.LATEST_VERSION != null }}
  #           type=semver,pattern={{major}},value=${{ env.LATEST_VERSION }},enable=${{ env.LATEST_VERSION != null }}
  #         labels: |
  #           maintainer=lightnear

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./sing-box
  #         platforms: |
  #           linux/amd64
  #           linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         # cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
  #         # cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  # singbox-build:
  #   if: ${{ always() }}
  #   needs: chevereto-docker
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     max-parallel: 1
  #     matrix:
  #       include:
  #         # windows
  #         - name: windows-amd64
  #           goos: windows
  #           goarch: amd64
  #           goamd64: v1
  #         - name: windows-amd64v3
  #           goos: windows
  #           goarch: amd64
  #           goamd64: v3
  #         # - name: windows-386
  #         #   goos: windows
  #         #   goarch: 386
  #         # - name: windows-arm64
  #         #   goos: windows
  #         #   goarch: arm64
  #         # - name: windows-arm32v7
  #         #   goos: windows
  #         #   goarch: arm
  #         #   goarm: 7

  #         # linux
  #         - name: linux-amd64
  #           goos: linux
  #           goarch: amd64
  #           goamd64: v1
  #         - name: linux-amd64v3
  #           goos: linux
  #           goarch: amd64
  #           goamd64: v3
  #         # - name: linux-386
  #         #   goos: linux
  #         #   goarch: 386
  #         - name: linux-arm64
  #           goos: linux
  #           goarch: arm64
  #         # - name: linux-armv5
  #         #   goos: linux
  #         #   goarch: arm
  #         #   goarm: 5
  #         # - name: linux-armv6
  #         #   goos: linux
  #         #   goarch: arm
  #         #   goarm: 6
  #         # - name: linux-armv7
  #         #   goos: linux
  #         #   goarch: arm
  #         #   goarm: 7
  #         # - name: linux-mips-softfloat
  #         #   goos: linux
  #         #   goarch: mips
  #         #   gomips: softfloat
  #         # - name: linux-mips-hardfloat
  #         #   goos: linux
  #         #   goarch: mips
  #         #   gomips: hardfloat
  #         # - name: linux-mipsel-softfloat
  #         #   goos: linux
  #         #   goarch: mipsle
  #         #   gomips: softfloat
  #         # - name: linux-mipsel-hardfloat
  #         #   goos: linux
  #         #   goarch: mipsle
  #         #   gomips: hardfloat
  #         # - name: linux-mips64
  #         #   goos: linux
  #         #   goarch: mips64
  #         # - name: linux-mips64el
  #         #   goos: linux
  #         #   goarch: mips64le
  #         # - name: linux-s390x
  #         #   goos: linux
  #         #   goarch: s390x
  #         # darwin
  #         - name: darwin-amd64
  #           goos: darwin
  #           goarch: amd64
  #           goamd64: v1
  #         - name: darwin-amd64v3
  #           goos: darwin
  #           goarch: amd64
  #           goamd64: v3
  #         # - name: darwin-arm64
  #         #   goos: darwin
  #         #   goarch: arm64
  #         # freebsd
  #         # - name: freebsd-amd64
  #         #   goos: freebsd
  #         #   goarch: amd64
  #         #   goamd64: v1
  #         # - name: freebsd-amd64-v3
  #         #   goos: freebsd
  #         #   goarch: amd64
  #         #   goamd64: v3
  #         # - name: freebsd-386
  #         #   goos: freebsd
  #         #   goarch: 386
  #         # - name: freebsd-arm64
  #         #   goos: freebsd
  #         #   goarch: arm64

  #   env:
  #     GOOS: ${{ matrix.goos }}
  #     GOARCH: ${{ matrix.goarch }}
  #     GOAMD64: ${{ matrix.goamd64 }}
  #     # GOARM: ${{ matrix.goarm }}
  #     # GOMIPS: ${{ matrix.gomips }}
  #     CGO_ENABLED: 0
  #     TAGS: with_gvisor,with_quic,with_dhcp,with_wireguard,with_ech,with_utls,with_reality_server,with_acme,with_clash_api

  #   steps:
  #     - name: Get latest version
  #       run: |
  #         LATEST_VERSION=""
  #         until [ -n "$LATEST_VERSION" ]; do
  #         LATEST_VERSION=$(curl -sX GET "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | \
  #         awk '/tag_name/{print $4;exit}' FS='[""]')
  #         done
  #         echo "SINGBOX_TAG=$LATEST_VERSION" >> $GITHUB_ENV
  #         LATEST_VERSION=$(echo $LATEST_VERSION | tr -d 'v')
  #         echo "SINGBOX_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
  #         echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M) ($LATEST_VERSION)" >> $GITHUB_ENV
  #         echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         repository: SagerNet/sing-box
  #         ref: ${{ env.SINGBOX_TAG }}
  #         fetch-depth: 0
  #         submodules: "recursive"

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: "1.21"
  #         check-latest: true
  #         cache: false

  #     - name: Build
  #       id: build
  #       run: |
  #         # sed -i 's/CGO_ENABLED=0/CGO_ENABLED=1/g' Makefile
  #         make
  #         # export COMMIT=$(git rev-parse --short HEAD)
  #         # export VERSION=$(go run ./cmd/internal/read_tag)
  #         # go build -v -trimpath -tags "$TAGS" \
  #         # -ldflags "-X \"github.com/sagernet/sing-box/constant.Version=$VERSION\" -s -w -buildid=" \
  #         # ./cmd/sing-box

  #     - name: Tar files
  #       run: tar -czvf sing-box-${{ matrix.name }}.tar.gz sing-box*

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: sing-box-${{ matrix.name }}
  #         path: sing-box*.tar.gz

  # release:
  #   needs: singbox-build
  #   name: release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get latest version
  #       run: |
  #         LATEST_VERSION=""
  #         until [ -n "$LATEST_VERSION" ]; do
  #         LATEST_VERSION=$(curl -sX GET "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | \
  #         awk '/tag_name/{print $4;exit}' FS='[""]')
  #         done
  #         echo "SINGBOX_TAG=$LATEST_VERSION" >> $GITHUB_ENV
  #         SINGBOX_VERSION=$(echo $LATEST_VERSION | tr -d 'v')
  #         echo "SINGBOX_VERSION=$SINGBOX_VERSION" >> $GITHUB_ENV
  #         echo "RELEASE_NAME=sing-box $SINGBOX_VERSION" >> $GITHUB_ENV
  #         echo "TAG_NAME=sing-box-$SINGBOX_VERSION" >> $GITHUB_ENV

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-linux-amd64

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-linux-amd64v3

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-linux-arm64

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-windows-amd64

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-windows-amd64v3

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-darwin-amd64

  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sing-box-darwin-amd64v3

  #     - name: Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ env.TAG_NAME }}
  #         name: ${{ env.RELEASE_NAME }}
  #         files: |
  #           sing-box*.tar.gz
